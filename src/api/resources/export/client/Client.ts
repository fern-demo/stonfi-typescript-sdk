/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core/index.js";
import * as Stonfi from "../../../index.js";
import { mergeHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Export {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

/**
 * Data export to 3rd-party applications
 */
export class Export {
    protected readonly _options: Export.Options;

    constructor(_options: Export.Options) {
        this._options = _options;
    }

    /**
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.export.getCmcStats()
     */
    public getCmcStats(
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Record<string, Stonfi.CmcPoolStats>[]> {
        return core.HttpResponsePromise.fromPromise(this.__getCmcStats(requestOptions));
    }

    private async __getCmcStats(
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Record<string, Stonfi.CmcPoolStats>[]>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "export/cmc/v1",
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Record<string, Stonfi.CmcPoolStats>[],
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StonfiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StonfiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.StonfiTimeoutError("Timeout exceeded when calling GET /export/cmc/v1.");
            case "unknown":
                throw new errors.StonfiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} address
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.export.screenerAssetInfo("address")
     */
    public screenerAssetInfo(
        address: string,
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Stonfi.ScreenerAssetInfoResponse> {
        return core.HttpResponsePromise.fromPromise(this.__screenerAssetInfo(address, requestOptions));
    }

    private async __screenerAssetInfo(
        address: string,
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Stonfi.ScreenerAssetInfoResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `export/dexscreener/v1/asset/${encodeURIComponent(address)}`,
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Stonfi.ScreenerAssetInfoResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StonfiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StonfiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.StonfiTimeoutError(
                    "Timeout exceeded when calling GET /export/dexscreener/v1/asset/{address}.",
                );
            case "unknown":
                throw new errors.StonfiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Stonfi.ScreenerEventsRequest} request
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.export.screenerEvents({
     *         fromBlock: 1,
     *         toBlock: 1
     *     })
     */
    public screenerEvents(
        request: Stonfi.ScreenerEventsRequest,
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Stonfi.ScreenerEventsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__screenerEvents(request, requestOptions));
    }

    private async __screenerEvents(
        request: Stonfi.ScreenerEventsRequest,
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Stonfi.ScreenerEventsResponse>> {
        const { fromBlock, toBlock } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["fromBlock"] = fromBlock.toString();
        _queryParams["toBlock"] = toBlock.toString();
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "export/dexscreener/v1/events",
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Stonfi.ScreenerEventsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StonfiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StonfiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.StonfiTimeoutError("Timeout exceeded when calling GET /export/dexscreener/v1/events.");
            case "unknown":
                throw new errors.StonfiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.export.screenerLatestBlock()
     */
    public screenerLatestBlock(
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Stonfi.ScreenerLatestBlockResponse> {
        return core.HttpResponsePromise.fromPromise(this.__screenerLatestBlock(requestOptions));
    }

    private async __screenerLatestBlock(
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Stonfi.ScreenerLatestBlockResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "export/dexscreener/v1/latest-block",
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Stonfi.ScreenerLatestBlockResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StonfiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StonfiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.StonfiTimeoutError(
                    "Timeout exceeded when calling GET /export/dexscreener/v1/latest-block.",
                );
            case "unknown":
                throw new errors.StonfiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} address
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.export.screenerPoolInfo("address")
     */
    public screenerPoolInfo(
        address: string,
        requestOptions?: Export.RequestOptions,
    ): core.HttpResponsePromise<Stonfi.ScreenerPoolInfoResponse> {
        return core.HttpResponsePromise.fromPromise(this.__screenerPoolInfo(address, requestOptions));
    }

    private async __screenerPoolInfo(
        address: string,
        requestOptions?: Export.RequestOptions,
    ): Promise<core.WithRawResponse<Stonfi.ScreenerPoolInfoResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `export/dexscreener/v1/pair/${encodeURIComponent(address)}`,
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Stonfi.ScreenerPoolInfoResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StonfiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StonfiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.StonfiTimeoutError(
                    "Timeout exceeded when calling GET /export/dexscreener/v1/pair/{address}.",
                );
            case "unknown":
                throw new errors.StonfiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
