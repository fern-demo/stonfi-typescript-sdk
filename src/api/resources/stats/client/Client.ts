/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core/index.js";
import * as Stonfi from "../../../index.js";
import { mergeHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Stats {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

/**
 * STON.fi statistics API version 1
 */
export class Stats {
    protected readonly _options: Stats.Options;

    constructor(_options: Stats.Options) {
        this._options = _options;
    }

    /**
     * @param {Stonfi.GetDexStatsRequest} request
     * @param {Stats.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.stats.getDexStats({
     *         since: "2023-06-01T12:34:56",
     *         until: "2023-06-02T23:59:59"
     *     })
     */
    public getDexStats(
        request: Stonfi.GetDexStatsRequest = {},
        requestOptions?: Stats.RequestOptions,
    ): core.HttpResponsePromise<Stonfi.GetDexStatsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getDexStats(request, requestOptions));
    }

    private async __getDexStats(
        request: Stonfi.GetDexStatsRequest = {},
        requestOptions?: Stats.RequestOptions,
    ): Promise<core.WithRawResponse<Stonfi.GetDexStatsResponse>> {
        const { since, until } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (since != null) {
            _queryParams["since"] = since;
        }

        if (until != null) {
            _queryParams["until"] = until;
        }

        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "v1/stats/dex",
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Stonfi.GetDexStatsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StonfiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StonfiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.StonfiTimeoutError("Timeout exceeded when calling GET /v1/stats/dex.");
            case "unknown":
                throw new errors.StonfiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Stonfi.GetFeeAccrualsStatsRequest} request
     * @param {Stats.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.stats.getFeeAccrualsStats({
     *         referrer_address: "EQCwiRZrfUSlMM0dz-Hm4KW1IqaFz1Pwxg3-t0jQDt36qOar",
     *         since: "2025-04-01T12:00:00",
     *         until: "2025-04-03T13:00:00"
     *     })
     */
    public getFeeAccrualsStats(
        request: Stonfi.GetFeeAccrualsStatsRequest,
        requestOptions?: Stats.RequestOptions,
    ): core.HttpResponsePromise<Stonfi.GetFeeAccrualsStatsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getFeeAccrualsStats(request, requestOptions));
    }

    private async __getFeeAccrualsStats(
        request: Stonfi.GetFeeAccrualsStatsRequest,
        requestOptions?: Stats.RequestOptions,
    ): Promise<core.WithRawResponse<Stonfi.GetFeeAccrualsStatsResponse>> {
        const { referrer_address: referrerAddress, since, until } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["referrer_address"] = referrerAddress;
        _queryParams["since"] = since;
        _queryParams["until"] = until;
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "v1/stats/fee_accruals",
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Stonfi.GetFeeAccrualsStatsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StonfiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StonfiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.StonfiTimeoutError("Timeout exceeded when calling GET /v1/stats/fee_accruals.");
            case "unknown":
                throw new errors.StonfiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Stonfi.GetFeeWithdrawalsStatsRequest} request
     * @param {Stats.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.stats.getFeeWithdrawalsStats({
     *         referrer_address: "EQCwiRZrfUSlMM0dz-Hm4KW1IqaFz1Pwxg3-t0jQDt36qOar",
     *         since: "2025-04-01T12:00:00",
     *         until: "2025-04-03T13:00:00"
     *     })
     */
    public getFeeWithdrawalsStats(
        request: Stonfi.GetFeeWithdrawalsStatsRequest,
        requestOptions?: Stats.RequestOptions,
    ): core.HttpResponsePromise<Stonfi.GetFeeWithdrawalsStatsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getFeeWithdrawalsStats(request, requestOptions));
    }

    private async __getFeeWithdrawalsStats(
        request: Stonfi.GetFeeWithdrawalsStatsRequest,
        requestOptions?: Stats.RequestOptions,
    ): Promise<core.WithRawResponse<Stonfi.GetFeeWithdrawalsStatsResponse>> {
        const { referrer_address: referrerAddress, since, until } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["referrer_address"] = referrerAddress;
        _queryParams["since"] = since;
        _queryParams["until"] = until;
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "v1/stats/fee_withdrawals",
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Stonfi.GetFeeWithdrawalsStatsResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StonfiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StonfiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.StonfiTimeoutError("Timeout exceeded when calling GET /v1/stats/fee_withdrawals.");
            case "unknown":
                throw new errors.StonfiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Queries the list operations in specified time range that lead to fee accruals to specified referrer
     *
     * @param {Stonfi.GetFeesStatsRequest} request
     * @param {Stats.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.stats.getFeesStats({
     *         referrer_address: "EQCwiRZrfUSlMM0dz-Hm4KW1IqaFz1Pwxg3-t0jQDt36qOar",
     *         since: "2025-04-01T12:00:00",
     *         until: "2025-04-03T13:00:00"
     *     })
     */
    public getFeesStats(
        request: Stonfi.GetFeesStatsRequest,
        requestOptions?: Stats.RequestOptions,
    ): core.HttpResponsePromise<Stonfi.GetFeesStatsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getFeesStats(request, requestOptions));
    }

    private async __getFeesStats(
        request: Stonfi.GetFeesStatsRequest,
        requestOptions?: Stats.RequestOptions,
    ): Promise<core.WithRawResponse<Stonfi.GetFeesStatsResponse>> {
        const { referrer_address: referrerAddress, since, until } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["referrer_address"] = referrerAddress;
        _queryParams["since"] = since;
        _queryParams["until"] = until;
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "v1/stats/fees",
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Stonfi.GetFeesStatsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StonfiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StonfiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.StonfiTimeoutError("Timeout exceeded when calling GET /v1/stats/fees.");
            case "unknown":
                throw new errors.StonfiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Stonfi.GetOperationStatsUtoipaRequest} request
     * @param {Stats.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.stats.getOperationStatsUtoipa({
     *         since: "2023-06-01T12:34:56",
     *         until: "2023-06-02T23:59:59"
     *     })
     */
    public getOperationStatsUtoipa(
        request: Stonfi.GetOperationStatsUtoipaRequest,
        requestOptions?: Stats.RequestOptions,
    ): core.HttpResponsePromise<Stonfi.GetOperationStatsUtoipaResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getOperationStatsUtoipa(request, requestOptions));
    }

    private async __getOperationStatsUtoipa(
        request: Stonfi.GetOperationStatsUtoipaRequest,
        requestOptions?: Stats.RequestOptions,
    ): Promise<core.WithRawResponse<Stonfi.GetOperationStatsUtoipaResponse>> {
        const { since, until, pool_address: poolAddress } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["since"] = since;
        _queryParams["until"] = until;
        if (poolAddress != null) {
            if (Array.isArray(poolAddress)) {
                _queryParams["pool_address"] = poolAddress.map((item) => item);
            } else {
                _queryParams["pool_address"] = poolAddress;
            }
        }

        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "v1/stats/operations",
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Stonfi.GetOperationStatsUtoipaResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StonfiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StonfiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.StonfiTimeoutError("Timeout exceeded when calling GET /v1/stats/operations.");
            case "unknown":
                throw new errors.StonfiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Stonfi.GetPoolStatsUtoipaRequest} request
     * @param {Stats.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.stats.getPoolStatsUtoipa({
     *         since: "2023-06-01T12:34:56",
     *         until: "2023-06-02T23:59:59"
     *     })
     */
    public getPoolStatsUtoipa(
        request: Stonfi.GetPoolStatsUtoipaRequest,
        requestOptions?: Stats.RequestOptions,
    ): core.HttpResponsePromise<Stonfi.GetPoolStatsUtoipaResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getPoolStatsUtoipa(request, requestOptions));
    }

    private async __getPoolStatsUtoipa(
        request: Stonfi.GetPoolStatsUtoipaRequest,
        requestOptions?: Stats.RequestOptions,
    ): Promise<core.WithRawResponse<Stonfi.GetPoolStatsUtoipaResponse>> {
        const { since, until, pool_address: poolAddress } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["since"] = since;
        _queryParams["until"] = until;
        if (poolAddress != null) {
            if (Array.isArray(poolAddress)) {
                _queryParams["pool_address"] = poolAddress.map((item) => item);
            } else {
                _queryParams["pool_address"] = poolAddress;
            }
        }

        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "v1/stats/pool",
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Stonfi.GetPoolStatsUtoipaResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StonfiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StonfiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.StonfiTimeoutError("Timeout exceeded when calling GET /v1/stats/pool.");
            case "unknown":
                throw new errors.StonfiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Stats.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.stats.getStakingStats()
     */
    public getStakingStats(
        requestOptions?: Stats.RequestOptions,
    ): core.HttpResponsePromise<Stonfi.GetStakingStatsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getStakingStats(requestOptions));
    }

    private async __getStakingStats(
        requestOptions?: Stats.RequestOptions,
    ): Promise<core.WithRawResponse<Stonfi.GetStakingStatsResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "v1/stats/staking",
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Stonfi.GetStakingStatsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StonfiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StonfiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.StonfiTimeoutError("Timeout exceeded when calling GET /v1/stats/staking.");
            case "unknown":
                throw new errors.StonfiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
