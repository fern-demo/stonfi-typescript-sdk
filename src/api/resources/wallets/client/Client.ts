/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core/index.js";
import * as Stonfi from "../../../index.js";
import { mergeHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Wallets {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

/**
 * Wallets specific data
 */
export class Wallets {
    protected readonly _options: Wallets.Options;

    constructor(_options: Wallets.Options) {
        this._options = _options;
    }

    /**
     * @param {string} addrStr
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.wallets.getWalletAssets("addr_str")
     */
    public getWalletAssets(
        addrStr: string,
        requestOptions?: Wallets.RequestOptions,
    ): core.HttpResponsePromise<Stonfi.GetWalletAssetsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getWalletAssets(addrStr, requestOptions));
    }

    private async __getWalletAssets(
        addrStr: string,
        requestOptions?: Wallets.RequestOptions,
    ): Promise<core.WithRawResponse<Stonfi.GetWalletAssetsResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `v1/wallets/${encodeURIComponent(addrStr)}/assets`,
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Stonfi.GetWalletAssetsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StonfiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StonfiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.StonfiTimeoutError("Timeout exceeded when calling GET /v1/wallets/{addr_str}/assets.");
            case "unknown":
                throw new errors.StonfiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} addrStr
     * @param {string} assetStr
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.wallets.getWalletAsset("addr_str", "asset_str")
     */
    public getWalletAsset(
        addrStr: string,
        assetStr: string,
        requestOptions?: Wallets.RequestOptions,
    ): core.HttpResponsePromise<Stonfi.GetWalletAssetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getWalletAsset(addrStr, assetStr, requestOptions));
    }

    private async __getWalletAsset(
        addrStr: string,
        assetStr: string,
        requestOptions?: Wallets.RequestOptions,
    ): Promise<core.WithRawResponse<Stonfi.GetWalletAssetResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `v1/wallets/${encodeURIComponent(addrStr)}/assets/${encodeURIComponent(assetStr)}`,
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Stonfi.GetWalletAssetResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StonfiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StonfiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.StonfiTimeoutError(
                    "Timeout exceeded when calling GET /v1/wallets/{addr_str}/assets/{asset_str}.",
                );
            case "unknown":
                throw new errors.StonfiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} addrStr
     * @param {Stonfi.GetWalletFarmsRequest} request
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.wallets.getWalletFarms("addr_str")
     */
    public getWalletFarms(
        addrStr: string,
        request: Stonfi.GetWalletFarmsRequest = {},
        requestOptions?: Wallets.RequestOptions,
    ): core.HttpResponsePromise<Stonfi.GetWalletFarmsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getWalletFarms(addrStr, request, requestOptions));
    }

    private async __getWalletFarms(
        addrStr: string,
        request: Stonfi.GetWalletFarmsRequest = {},
        requestOptions?: Wallets.RequestOptions,
    ): Promise<core.WithRawResponse<Stonfi.GetWalletFarmsResponse>> {
        const { dex_v2: dexV2, only_active: onlyActive } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (dexV2 != null) {
            _queryParams["dex_v2"] = dexV2.toString();
        }

        if (onlyActive != null) {
            _queryParams["only_active"] = onlyActive.toString();
        }

        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `v1/wallets/${encodeURIComponent(addrStr)}/farms`,
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Stonfi.GetWalletFarmsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StonfiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StonfiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.StonfiTimeoutError("Timeout exceeded when calling GET /v1/wallets/{addr_str}/farms.");
            case "unknown":
                throw new errors.StonfiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} addrStr
     * @param {string} farmStr
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.wallets.getWalletFarm("addr_str", "farm_str")
     */
    public getWalletFarm(
        addrStr: string,
        farmStr: string,
        requestOptions?: Wallets.RequestOptions,
    ): core.HttpResponsePromise<Stonfi.GetWalletFarmResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getWalletFarm(addrStr, farmStr, requestOptions));
    }

    private async __getWalletFarm(
        addrStr: string,
        farmStr: string,
        requestOptions?: Wallets.RequestOptions,
    ): Promise<core.WithRawResponse<Stonfi.GetWalletFarmResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `v1/wallets/${encodeURIComponent(addrStr)}/farms/${encodeURIComponent(farmStr)}`,
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Stonfi.GetWalletFarmResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StonfiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StonfiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.StonfiTimeoutError(
                    "Timeout exceeded when calling GET /v1/wallets/{addr_str}/farms/{farm_str}.",
                );
            case "unknown":
                throw new errors.StonfiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} addrStr
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.wallets.getFeeVaults("addr_str")
     */
    public getFeeVaults(
        addrStr: string,
        requestOptions?: Wallets.RequestOptions,
    ): core.HttpResponsePromise<Stonfi.GetFeeVaultsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getFeeVaults(addrStr, requestOptions));
    }

    private async __getFeeVaults(
        addrStr: string,
        requestOptions?: Wallets.RequestOptions,
    ): Promise<core.WithRawResponse<Stonfi.GetFeeVaultsResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `v1/wallets/${encodeURIComponent(addrStr)}/fee_vaults`,
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Stonfi.GetFeeVaultsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StonfiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StonfiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.StonfiTimeoutError(
                    "Timeout exceeded when calling GET /v1/wallets/{addr_str}/fee_vaults.",
                );
            case "unknown":
                throw new errors.StonfiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} addrStr
     * @param {Stonfi.GetWalletOperationsUtoipaRequest} request
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.wallets.getWalletOperationsUtoipa("addr_str", {
     *         since: "2023-06-01T12:34:56",
     *         until: "2023-06-02T23:59:59"
     *     })
     */
    public getWalletOperationsUtoipa(
        addrStr: string,
        request: Stonfi.GetWalletOperationsUtoipaRequest,
        requestOptions?: Wallets.RequestOptions,
    ): core.HttpResponsePromise<Stonfi.GetWalletOperationsUtoipaResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getWalletOperationsUtoipa(addrStr, request, requestOptions));
    }

    private async __getWalletOperationsUtoipa(
        addrStr: string,
        request: Stonfi.GetWalletOperationsUtoipaRequest,
        requestOptions?: Wallets.RequestOptions,
    ): Promise<core.WithRawResponse<Stonfi.GetWalletOperationsUtoipaResponse>> {
        const { since, until, op_type: opType, dex_v2: dexV2 } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["since"] = since;
        _queryParams["until"] = until;
        if (opType != null) {
            if (Array.isArray(opType)) {
                _queryParams["op_type"] = opType.map((item) => item);
            } else {
                _queryParams["op_type"] = opType;
            }
        }

        if (dexV2 != null) {
            _queryParams["dex_v2"] = dexV2.toString();
        }

        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `v1/wallets/${encodeURIComponent(addrStr)}/operations`,
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Stonfi.GetWalletOperationsUtoipaResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StonfiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StonfiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.StonfiTimeoutError(
                    "Timeout exceeded when calling GET /v1/wallets/{addr_str}/operations.",
                );
            case "unknown":
                throw new errors.StonfiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} addrStr
     * @param {Stonfi.GetWalletPoolsRequest} request
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.wallets.getWalletPools("addr_str")
     */
    public getWalletPools(
        addrStr: string,
        request: Stonfi.GetWalletPoolsRequest = {},
        requestOptions?: Wallets.RequestOptions,
    ): core.HttpResponsePromise<Stonfi.GetWalletPoolsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getWalletPools(addrStr, request, requestOptions));
    }

    private async __getWalletPools(
        addrStr: string,
        request: Stonfi.GetWalletPoolsRequest = {},
        requestOptions?: Wallets.RequestOptions,
    ): Promise<core.WithRawResponse<Stonfi.GetWalletPoolsResponse>> {
        const { dex_v2: dexV2 } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (dexV2 != null) {
            _queryParams["dex_v2"] = dexV2.toString();
        }

        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `v1/wallets/${encodeURIComponent(addrStr)}/pools`,
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Stonfi.GetWalletPoolsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StonfiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StonfiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.StonfiTimeoutError("Timeout exceeded when calling GET /v1/wallets/{addr_str}/pools.");
            case "unknown":
                throw new errors.StonfiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} addrStr
     * @param {string} poolStr
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.wallets.getWalletPool("addr_str", "pool_str")
     */
    public getWalletPool(
        addrStr: string,
        poolStr: string,
        requestOptions?: Wallets.RequestOptions,
    ): core.HttpResponsePromise<Stonfi.GetWalletPoolResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getWalletPool(addrStr, poolStr, requestOptions));
    }

    private async __getWalletPool(
        addrStr: string,
        poolStr: string,
        requestOptions?: Wallets.RequestOptions,
    ): Promise<core.WithRawResponse<Stonfi.GetWalletPoolResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `v1/wallets/${encodeURIComponent(addrStr)}/pools/${encodeURIComponent(poolStr)}`,
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Stonfi.GetWalletPoolResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StonfiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StonfiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.StonfiTimeoutError(
                    "Timeout exceeded when calling GET /v1/wallets/{addr_str}/pools/{pool_str}.",
                );
            case "unknown":
                throw new errors.StonfiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} addrStr
     * @param {Wallets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.wallets.getWalletStakes("addr_str")
     */
    public getWalletStakes(
        addrStr: string,
        requestOptions?: Wallets.RequestOptions,
    ): core.HttpResponsePromise<Stonfi.GetWalletStakesResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getWalletStakes(addrStr, requestOptions));
    }

    private async __getWalletStakes(
        addrStr: string,
        requestOptions?: Wallets.RequestOptions,
    ): Promise<core.WithRawResponse<Stonfi.GetWalletStakesResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `v1/wallets/${encodeURIComponent(addrStr)}/stakes`,
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Stonfi.GetWalletStakesResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StonfiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StonfiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.StonfiTimeoutError("Timeout exceeded when calling GET /v1/wallets/{addr_str}/stakes.");
            case "unknown":
                throw new errors.StonfiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
