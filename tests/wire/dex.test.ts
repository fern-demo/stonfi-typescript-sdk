/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { StonfiClient } from "../../src/Client";

describe("Dex", () => {
    test("get_asset_list", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = {
            asset_list: [
                {
                    balance: "balance",
                    blacklisted: true,
                    community: true,
                    contract_address: "contract_address",
                    custom_payload_api_uri: "custom_payload_api_uri",
                    decimals: 1,
                    default_symbol: true,
                    deprecated: true,
                    dex_price_usd: "dex_price_usd",
                    dex_usd_price: "dex_usd_price",
                    display_name: "display_name",
                    extensions: ["extensions"],
                    image_url: "image_url",
                    kind: "Jetton",
                    popularity_index: 1.1,
                    priority: 1,
                    symbol: "symbol",
                    tags: ["tags"],
                    taxable: true,
                    third_party_price_usd: "third_party_price_usd",
                    third_party_usd_price: "third_party_usd_price",
                    wallet_address: "wallet_address",
                },
            ],
        };
        server.mockEndpoint().get("/v1/assets").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.dex.getAssetList();
        expect(response).toEqual({
            asset_list: [
                {
                    balance: "balance",
                    blacklisted: true,
                    community: true,
                    contract_address: "contract_address",
                    custom_payload_api_uri: "custom_payload_api_uri",
                    decimals: 1,
                    default_symbol: true,
                    deprecated: true,
                    dex_price_usd: "dex_price_usd",
                    dex_usd_price: "dex_usd_price",
                    display_name: "display_name",
                    extensions: ["extensions"],
                    image_url: "image_url",
                    kind: "Jetton",
                    popularity_index: 1.1,
                    priority: 1,
                    symbol: "symbol",
                    tags: ["tags"],
                    taxable: true,
                    third_party_price_usd: "third_party_price_usd",
                    third_party_usd_price: "third_party_usd_price",
                    wallet_address: "wallet_address",
                },
            ],
        });
    });

    test("asset_query", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = {
            asset_list: [
                {
                    balance: "balance",
                    contract_address: "contract_address",
                    dex_price_usd: "dex_price_usd",
                    extensions: ["extensions"],
                    kind: "Jetton",
                    pair_priority: 1,
                    popularity_index: 1.1,
                    tags: ["tags"],
                    wallet_address: "wallet_address",
                },
            ],
        };
        server.mockEndpoint().post("/v1/assets/query").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.dex.assetQuery();
        expect(response).toEqual({
            asset_list: [
                {
                    balance: "balance",
                    contract_address: "contract_address",
                    dex_price_usd: "dex_price_usd",
                    extensions: ["extensions"],
                    kind: "Jetton",
                    pair_priority: 1,
                    popularity_index: 1.1,
                    tags: ["tags"],
                    wallet_address: "wallet_address",
                },
            ],
        });
    });

    test("asset_search", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = {
            asset_list: [
                {
                    balance: "balance",
                    contract_address: "contract_address",
                    dex_price_usd: "dex_price_usd",
                    extensions: ["extensions"],
                    kind: "Jetton",
                    pair_priority: 1,
                    popularity_index: 1.1,
                    tags: ["tags"],
                    wallet_address: "wallet_address",
                },
            ],
        };
        server.mockEndpoint().post("/v1/assets/search").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.dex.assetSearch({
            search_string: "search_string",
        });
        expect(response).toEqual({
            asset_list: [
                {
                    balance: "balance",
                    contract_address: "contract_address",
                    dex_price_usd: "dex_price_usd",
                    extensions: ["extensions"],
                    kind: "Jetton",
                    pair_priority: 1,
                    popularity_index: 1.1,
                    tags: ["tags"],
                    wallet_address: "wallet_address",
                },
            ],
        });
    });

    test("get_asset", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = {
            asset: {
                balance: "balance",
                blacklisted: true,
                community: true,
                contract_address: "contract_address",
                custom_payload_api_uri: "custom_payload_api_uri",
                decimals: 1,
                default_symbol: true,
                deprecated: true,
                dex_price_usd: "dex_price_usd",
                dex_usd_price: "dex_usd_price",
                display_name: "display_name",
                extensions: ["extensions"],
                image_url: "image_url",
                kind: "Jetton",
                popularity_index: 1.1,
                priority: 1,
                symbol: "symbol",
                tags: ["tags"],
                taxable: true,
                third_party_price_usd: "third_party_price_usd",
                third_party_usd_price: "third_party_usd_price",
                wallet_address: "wallet_address",
            },
        };
        server
            .mockEndpoint()
            .get("/v1/assets/addr_str")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dex.getAsset("addr_str");
        expect(response).toEqual({
            asset: {
                balance: "balance",
                blacklisted: true,
                community: true,
                contract_address: "contract_address",
                custom_payload_api_uri: "custom_payload_api_uri",
                decimals: 1,
                default_symbol: true,
                deprecated: true,
                dex_price_usd: "dex_price_usd",
                dex_usd_price: "dex_usd_price",
                display_name: "display_name",
                extensions: ["extensions"],
                image_url: "image_url",
                kind: "Jetton",
                popularity_index: 1.1,
                priority: 1,
                symbol: "symbol",
                tags: ["tags"],
                taxable: true,
                third_party_price_usd: "third_party_price_usd",
                third_party_usd_price: "third_party_usd_price",
                wallet_address: "wallet_address",
            },
        });
    });

    test("get_farm_list", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = {
            farm_list: [
                {
                    all_rewards_distributed: true,
                    apy: "apy",
                    create_timestamp: "2024-01-15T09:30:00Z",
                    custodian_address: "custodian_address",
                    locked_total_lp: "locked_total_lp",
                    locked_total_lp_usd: "locked_total_lp_usd",
                    min_stake_duration_s: "min_stake_duration_s",
                    minter_address: "minter_address",
                    nft_infos: [
                        {
                            address: "address",
                            create_timestamp: "create_timestamp",
                            min_unstake_timestamp: "min_unstake_timestamp",
                            nonclaimed_rewards: "nonclaimed_rewards",
                            rewards: [{ address: "address", amount: "amount" }],
                            staked_tokens: "staked_tokens",
                            status: "status",
                        },
                    ],
                    owner_address: "owner_address",
                    pool_address: "pool_address",
                    rewards: [
                        {
                            address: "address",
                            admin_fee: "admin_fee",
                            index: 1,
                            remaining_rewards: "remaining_rewards",
                            reward_rate_24h: "reward_rate_24h",
                            rewards_distributed: true,
                            status: "status",
                        },
                    ],
                    status: "status",
                    version: "version",
                },
            ],
        };
        server.mockEndpoint().get("/v1/farms").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.dex.getFarmList();
        expect(response).toEqual({
            farm_list: [
                {
                    all_rewards_distributed: true,
                    apy: "apy",
                    create_timestamp: "2024-01-15T09:30:00Z",
                    custodian_address: "custodian_address",
                    locked_total_lp: "locked_total_lp",
                    locked_total_lp_usd: "locked_total_lp_usd",
                    min_stake_duration_s: "min_stake_duration_s",
                    minter_address: "minter_address",
                    nft_infos: [
                        {
                            address: "address",
                            create_timestamp: "create_timestamp",
                            min_unstake_timestamp: "min_unstake_timestamp",
                            nonclaimed_rewards: "nonclaimed_rewards",
                            rewards: [
                                {
                                    address: "address",
                                    amount: "amount",
                                },
                            ],
                            staked_tokens: "staked_tokens",
                            status: "status",
                        },
                    ],
                    owner_address: "owner_address",
                    pool_address: "pool_address",
                    rewards: [
                        {
                            address: "address",
                            admin_fee: "admin_fee",
                            index: 1,
                            remaining_rewards: "remaining_rewards",
                            reward_rate_24h: "reward_rate_24h",
                            rewards_distributed: true,
                            status: "status",
                        },
                    ],
                    status: "status",
                    version: "version",
                },
            ],
        });
    });

    test("get_farms_by_pool", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = {
            farm_list: [
                {
                    all_rewards_distributed: true,
                    apy: "apy",
                    create_timestamp: "2024-01-15T09:30:00Z",
                    custodian_address: "custodian_address",
                    locked_total_lp: "locked_total_lp",
                    locked_total_lp_usd: "locked_total_lp_usd",
                    min_stake_duration_s: "min_stake_duration_s",
                    minter_address: "minter_address",
                    nft_infos: [
                        {
                            address: "address",
                            create_timestamp: "create_timestamp",
                            min_unstake_timestamp: "min_unstake_timestamp",
                            nonclaimed_rewards: "nonclaimed_rewards",
                            rewards: [{ address: "address", amount: "amount" }],
                            staked_tokens: "staked_tokens",
                            status: "status",
                        },
                    ],
                    owner_address: "owner_address",
                    pool_address: "pool_address",
                    rewards: [
                        {
                            address: "address",
                            admin_fee: "admin_fee",
                            index: 1,
                            remaining_rewards: "remaining_rewards",
                            reward_rate_24h: "reward_rate_24h",
                            rewards_distributed: true,
                            status: "status",
                        },
                    ],
                    status: "status",
                    version: "version",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/v1/farms/by_pool/pool_addr_str")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dex.getFarmsByPool("pool_addr_str");
        expect(response).toEqual({
            farm_list: [
                {
                    all_rewards_distributed: true,
                    apy: "apy",
                    create_timestamp: "2024-01-15T09:30:00Z",
                    custodian_address: "custodian_address",
                    locked_total_lp: "locked_total_lp",
                    locked_total_lp_usd: "locked_total_lp_usd",
                    min_stake_duration_s: "min_stake_duration_s",
                    minter_address: "minter_address",
                    nft_infos: [
                        {
                            address: "address",
                            create_timestamp: "create_timestamp",
                            min_unstake_timestamp: "min_unstake_timestamp",
                            nonclaimed_rewards: "nonclaimed_rewards",
                            rewards: [
                                {
                                    address: "address",
                                    amount: "amount",
                                },
                            ],
                            staked_tokens: "staked_tokens",
                            status: "status",
                        },
                    ],
                    owner_address: "owner_address",
                    pool_address: "pool_address",
                    rewards: [
                        {
                            address: "address",
                            admin_fee: "admin_fee",
                            index: 1,
                            remaining_rewards: "remaining_rewards",
                            reward_rate_24h: "reward_rate_24h",
                            rewards_distributed: true,
                            status: "status",
                        },
                    ],
                    status: "status",
                    version: "version",
                },
            ],
        });
    });

    test("get_farm", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = {
            farm: {
                all_rewards_distributed: true,
                apy: "apy",
                create_timestamp: "2024-01-15T09:30:00Z",
                custodian_address: "custodian_address",
                locked_total_lp: "locked_total_lp",
                locked_total_lp_usd: "locked_total_lp_usd",
                meta: {
                    description: "description",
                    image: "image",
                    marketplace: "marketplace",
                    name: "name",
                    social_links: { key: "value" },
                },
                min_stake_duration_s: "min_stake_duration_s",
                minter_address: "minter_address",
                nft_infos: [
                    {
                        address: "address",
                        create_timestamp: "create_timestamp",
                        min_unstake_timestamp: "min_unstake_timestamp",
                        nonclaimed_rewards: "nonclaimed_rewards",
                        rewards: [{ address: "address", amount: "amount" }],
                        staked_tokens: "staked_tokens",
                        status: "status",
                    },
                ],
                owner_address: "owner_address",
                pool_address: "pool_address",
                rewards: [
                    {
                        address: "address",
                        admin_fee: "admin_fee",
                        index: 1,
                        remaining_rewards: "remaining_rewards",
                        reward_rate_24h: "reward_rate_24h",
                        rewards_distributed: true,
                        status: "status",
                    },
                ],
                status: "status",
                version: "version",
            },
        };
        server.mockEndpoint().get("/v1/farms/addr_str").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.dex.getFarm("addr_str");
        expect(response).toEqual({
            farm: {
                all_rewards_distributed: true,
                apy: "apy",
                create_timestamp: "2024-01-15T09:30:00Z",
                custodian_address: "custodian_address",
                locked_total_lp: "locked_total_lp",
                locked_total_lp_usd: "locked_total_lp_usd",
                meta: {
                    description: "description",
                    image: "image",
                    marketplace: "marketplace",
                    name: "name",
                    social_links: {
                        key: "value",
                    },
                },
                min_stake_duration_s: "min_stake_duration_s",
                minter_address: "minter_address",
                nft_infos: [
                    {
                        address: "address",
                        create_timestamp: "create_timestamp",
                        min_unstake_timestamp: "min_unstake_timestamp",
                        nonclaimed_rewards: "nonclaimed_rewards",
                        rewards: [
                            {
                                address: "address",
                                amount: "amount",
                            },
                        ],
                        staked_tokens: "staked_tokens",
                        status: "status",
                    },
                ],
                owner_address: "owner_address",
                pool_address: "pool_address",
                rewards: [
                    {
                        address: "address",
                        admin_fee: "admin_fee",
                        index: 1,
                        remaining_rewards: "remaining_rewards",
                        reward_rate_24h: "reward_rate_24h",
                        rewards_distributed: true,
                        status: "status",
                    },
                ],
                status: "status",
                version: "version",
            },
        });
    });

    test("simulateLiquidityProvision", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = {
            estimated_lp_units: "estimated_lp_units",
            estimated_token_a_rate: "estimated_token_a_rate",
            estimated_token_a_units: "estimated_token_a_units",
            estimated_token_b_rate: "estimated_token_b_rate",
            estimated_token_b_units: "estimated_token_b_units",
            lp_account_address: "lp_account_address",
            lp_account_token_a_balance: "lp_account_token_a_balance",
            lp_account_token_b_balance: "lp_account_token_b_balance",
            lp_total_supply: "lp_total_supply",
            min_lp_units: "min_lp_units",
            min_token_a_units: "min_token_a_units",
            min_token_b_units: "min_token_b_units",
            pool_address: "pool_address",
            price_impact: "price_impact",
            provision_type: "provision_type",
            router_address: "router_address",
            token_a: "token_a",
            token_a_units: "token_a_units",
            token_b: "token_b",
            token_b_units: "token_b_units",
        };
        server
            .mockEndpoint()
            .post("/v1/liquidity_provision/simulate")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dex.simulateLiquidityProvision({
            provision_type: "Initial",
            pool_address: "EQCGScrZe1xbyWqWDvdI6mzP-GAcAWFv6ZXuaJOuSqemxku4",
            wallet_address: "UQDYzZmfsrGzhObKJUw4gzdeIxEai3jAFbiGKGwxvxHinf4K",
            token_a: "EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c",
            token_b: "EQCxE6mUtQJKFnGfaROTKOt1lZbDiiX1kCixRv7Nw2Id_sDs",
            token_a_units: "10",
            token_b_units: "10",
            slippage_tolerance: "0.001",
        });
        expect(response).toEqual({
            estimated_lp_units: "estimated_lp_units",
            estimated_token_a_rate: "estimated_token_a_rate",
            estimated_token_a_units: "estimated_token_a_units",
            estimated_token_b_rate: "estimated_token_b_rate",
            estimated_token_b_units: "estimated_token_b_units",
            lp_account_address: "lp_account_address",
            lp_account_token_a_balance: "lp_account_token_a_balance",
            lp_account_token_b_balance: "lp_account_token_b_balance",
            lp_total_supply: "lp_total_supply",
            min_lp_units: "min_lp_units",
            min_token_a_units: "min_token_a_units",
            min_token_b_units: "min_token_b_units",
            pool_address: "pool_address",
            price_impact: "price_impact",
            provision_type: "provision_type",
            router_address: "router_address",
            token_a: "token_a",
            token_a_units: "token_a_units",
            token_b: "token_b",
            token_b_units: "token_b_units",
        });
    });

    test("get_market_list", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = { pairs: ["pairs"] };
        server.mockEndpoint().get("/v1/markets").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.dex.getMarketList();
        expect(response).toEqual({
            pairs: ["pairs"],
        });
    });

    test("pool_query", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = {
            pool_list: [
                {
                    address: "address",
                    amp: "amp",
                    apy_1d: "apy_1d",
                    apy_30d: "apy_30d",
                    apy_7d: "apy_7d",
                    collected_token0_protocol_fee: "collected_token0_protocol_fee",
                    collected_token1_protocol_fee: "collected_token1_protocol_fee",
                    deprecated: true,
                    lp_account_address: "lp_account_address",
                    lp_balance: "lp_balance",
                    lp_fee: "lp_fee",
                    lp_price_usd: "lp_price_usd",
                    lp_total_supply: "lp_total_supply",
                    lp_total_supply_usd: "lp_total_supply_usd",
                    lp_wallet_address: "lp_wallet_address",
                    popularity_index: 1.1,
                    protocol_fee: "protocol_fee",
                    protocol_fee_address: "protocol_fee_address",
                    rate: "rate",
                    ref_fee: "ref_fee",
                    reserve0: "reserve0",
                    reserve1: "reserve1",
                    router_address: "router_address",
                    token0_address: "token0_address",
                    token0_balance: "token0_balance",
                    token1_address: "token1_address",
                    token1_balance: "token1_balance",
                    volume_24h_usd: "volume_24h_usd",
                    w0: "w0",
                },
            ],
        };
        server.mockEndpoint().post("/v1/pool/query").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.dex.poolQuery();
        expect(response).toEqual({
            pool_list: [
                {
                    address: "address",
                    amp: "amp",
                    apy_1d: "apy_1d",
                    apy_30d: "apy_30d",
                    apy_7d: "apy_7d",
                    collected_token0_protocol_fee: "collected_token0_protocol_fee",
                    collected_token1_protocol_fee: "collected_token1_protocol_fee",
                    deprecated: true,
                    lp_account_address: "lp_account_address",
                    lp_balance: "lp_balance",
                    lp_fee: "lp_fee",
                    lp_price_usd: "lp_price_usd",
                    lp_total_supply: "lp_total_supply",
                    lp_total_supply_usd: "lp_total_supply_usd",
                    lp_wallet_address: "lp_wallet_address",
                    popularity_index: 1.1,
                    protocol_fee: "protocol_fee",
                    protocol_fee_address: "protocol_fee_address",
                    rate: "rate",
                    ref_fee: "ref_fee",
                    reserve0: "reserve0",
                    reserve1: "reserve1",
                    router_address: "router_address",
                    token0_address: "token0_address",
                    token0_balance: "token0_balance",
                    token1_address: "token1_address",
                    token1_balance: "token1_balance",
                    volume_24h_usd: "volume_24h_usd",
                    w0: "w0",
                },
            ],
        });
    });

    test("get_pool_list", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = {
            pool_list: [
                {
                    address: "address",
                    amp: "amp",
                    apy_1d: "apy_1d",
                    apy_30d: "apy_30d",
                    apy_7d: "apy_7d",
                    collected_token0_protocol_fee: "collected_token0_protocol_fee",
                    collected_token1_protocol_fee: "collected_token1_protocol_fee",
                    deprecated: true,
                    lp_account_address: "lp_account_address",
                    lp_balance: "lp_balance",
                    lp_fee: "lp_fee",
                    lp_price_usd: "lp_price_usd",
                    lp_total_supply: "lp_total_supply",
                    lp_total_supply_usd: "lp_total_supply_usd",
                    lp_wallet_address: "lp_wallet_address",
                    popularity_index: 1.1,
                    protocol_fee: "protocol_fee",
                    protocol_fee_address: "protocol_fee_address",
                    rate: "rate",
                    ref_fee: "ref_fee",
                    reserve0: "reserve0",
                    reserve1: "reserve1",
                    router_address: "router_address",
                    token0_address: "token0_address",
                    token0_balance: "token0_balance",
                    token1_address: "token1_address",
                    token1_balance: "token1_balance",
                    volume_24h_usd: "volume_24h_usd",
                    w0: "w0",
                },
            ],
        };
        server.mockEndpoint().get("/v1/pools").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.dex.getPoolList();
        expect(response).toEqual({
            pool_list: [
                {
                    address: "address",
                    amp: "amp",
                    apy_1d: "apy_1d",
                    apy_30d: "apy_30d",
                    apy_7d: "apy_7d",
                    collected_token0_protocol_fee: "collected_token0_protocol_fee",
                    collected_token1_protocol_fee: "collected_token1_protocol_fee",
                    deprecated: true,
                    lp_account_address: "lp_account_address",
                    lp_balance: "lp_balance",
                    lp_fee: "lp_fee",
                    lp_price_usd: "lp_price_usd",
                    lp_total_supply: "lp_total_supply",
                    lp_total_supply_usd: "lp_total_supply_usd",
                    lp_wallet_address: "lp_wallet_address",
                    popularity_index: 1.1,
                    protocol_fee: "protocol_fee",
                    protocol_fee_address: "protocol_fee_address",
                    rate: "rate",
                    ref_fee: "ref_fee",
                    reserve0: "reserve0",
                    reserve1: "reserve1",
                    router_address: "router_address",
                    token0_address: "token0_address",
                    token0_balance: "token0_balance",
                    token1_address: "token1_address",
                    token1_balance: "token1_balance",
                    volume_24h_usd: "volume_24h_usd",
                    w0: "w0",
                },
            ],
        });
    });

    test("get_pool_list_by_market", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = {
            pool_list: [
                {
                    address: "address",
                    amp: "amp",
                    apy_1d: "apy_1d",
                    apy_30d: "apy_30d",
                    apy_7d: "apy_7d",
                    collected_token0_protocol_fee: "collected_token0_protocol_fee",
                    collected_token1_protocol_fee: "collected_token1_protocol_fee",
                    deprecated: true,
                    lp_account_address: "lp_account_address",
                    lp_balance: "lp_balance",
                    lp_fee: "lp_fee",
                    lp_price_usd: "lp_price_usd",
                    lp_total_supply: "lp_total_supply",
                    lp_total_supply_usd: "lp_total_supply_usd",
                    lp_wallet_address: "lp_wallet_address",
                    popularity_index: 1.1,
                    protocol_fee: "protocol_fee",
                    protocol_fee_address: "protocol_fee_address",
                    rate: "rate",
                    ref_fee: "ref_fee",
                    reserve0: "reserve0",
                    reserve1: "reserve1",
                    router_address: "router_address",
                    token0_address: "token0_address",
                    token0_balance: "token0_balance",
                    token1_address: "token1_address",
                    token1_balance: "token1_balance",
                    volume_24h_usd: "volume_24h_usd",
                    w0: "w0",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/v1/pools/by_market/asset_0_addr_str/asset_1_addr_str")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dex.getPoolListByMarket("asset_0_addr_str", "asset_1_addr_str");
        expect(response).toEqual({
            pool_list: [
                {
                    address: "address",
                    amp: "amp",
                    apy_1d: "apy_1d",
                    apy_30d: "apy_30d",
                    apy_7d: "apy_7d",
                    collected_token0_protocol_fee: "collected_token0_protocol_fee",
                    collected_token1_protocol_fee: "collected_token1_protocol_fee",
                    deprecated: true,
                    lp_account_address: "lp_account_address",
                    lp_balance: "lp_balance",
                    lp_fee: "lp_fee",
                    lp_price_usd: "lp_price_usd",
                    lp_total_supply: "lp_total_supply",
                    lp_total_supply_usd: "lp_total_supply_usd",
                    lp_wallet_address: "lp_wallet_address",
                    popularity_index: 1.1,
                    protocol_fee: "protocol_fee",
                    protocol_fee_address: "protocol_fee_address",
                    rate: "rate",
                    ref_fee: "ref_fee",
                    reserve0: "reserve0",
                    reserve1: "reserve1",
                    router_address: "router_address",
                    token0_address: "token0_address",
                    token0_balance: "token0_balance",
                    token1_address: "token1_address",
                    token1_balance: "token1_balance",
                    volume_24h_usd: "volume_24h_usd",
                    w0: "w0",
                },
            ],
        });
    });

    test("get_pool", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = {
            pool: {
                address: "address",
                amp: "amp",
                apy_1d: "apy_1d",
                apy_30d: "apy_30d",
                apy_7d: "apy_7d",
                collected_token0_protocol_fee: "collected_token0_protocol_fee",
                collected_token1_protocol_fee: "collected_token1_protocol_fee",
                deprecated: true,
                lp_account_address: "lp_account_address",
                lp_balance: "lp_balance",
                lp_fee: "lp_fee",
                lp_price_usd: "lp_price_usd",
                lp_total_supply: "lp_total_supply",
                lp_total_supply_usd: "lp_total_supply_usd",
                lp_wallet_address: "lp_wallet_address",
                popularity_index: 1.1,
                protocol_fee: "protocol_fee",
                protocol_fee_address: "protocol_fee_address",
                rate: "rate",
                ref_fee: "ref_fee",
                reserve0: "reserve0",
                reserve1: "reserve1",
                router_address: "router_address",
                token0_address: "token0_address",
                token0_balance: "token0_balance",
                token1_address: "token1_address",
                token1_balance: "token1_balance",
                volume_24h_usd: "volume_24h_usd",
                w0: "w0",
            },
        };
        server.mockEndpoint().get("/v1/pools/addr_str").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.dex.getPool("addr_str");
        expect(response).toEqual({
            pool: {
                address: "address",
                amp: "amp",
                apy_1d: "apy_1d",
                apy_30d: "apy_30d",
                apy_7d: "apy_7d",
                collected_token0_protocol_fee: "collected_token0_protocol_fee",
                collected_token1_protocol_fee: "collected_token1_protocol_fee",
                deprecated: true,
                lp_account_address: "lp_account_address",
                lp_balance: "lp_balance",
                lp_fee: "lp_fee",
                lp_price_usd: "lp_price_usd",
                lp_total_supply: "lp_total_supply",
                lp_total_supply_usd: "lp_total_supply_usd",
                lp_wallet_address: "lp_wallet_address",
                popularity_index: 1.1,
                protocol_fee: "protocol_fee",
                protocol_fee_address: "protocol_fee_address",
                rate: "rate",
                ref_fee: "ref_fee",
                reserve0: "reserve0",
                reserve1: "reserve1",
                router_address: "router_address",
                token0_address: "token0_address",
                token0_balance: "token0_balance",
                token1_address: "token1_address",
                token1_balance: "token1_balance",
                volume_24h_usd: "volume_24h_usd",
                w0: "w0",
            },
        });
    });

    test("reverseSimulateSwapUtoipa", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = {
            ask_address: "ask_address",
            ask_jetton_wallet: "ask_jetton_wallet",
            ask_units: "ask_units",
            fee_address: "fee_address",
            fee_percent: "fee_percent",
            fee_units: "fee_units",
            gas_params: {
                estimated_gas_consumption: "estimated_gas_consumption",
                forward_gas: "forward_gas",
                gas_budget: "gas_budget",
            },
            min_ask_units: "min_ask_units",
            offer_address: "offer_address",
            offer_jetton_wallet: "offer_jetton_wallet",
            offer_units: "offer_units",
            pool_address: "pool_address",
            price_impact: "price_impact",
            recommended_min_ask_units: "recommended_min_ask_units",
            recommended_slippage_tolerance: "recommended_slippage_tolerance",
            router_address: "router_address",
            slippage_tolerance: "slippage_tolerance",
            swap_rate: "swap_rate",
        };
        server
            .mockEndpoint()
            .post("/v1/reverse_swap/simulate")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dex.reverseSimulateSwapUtoipa({
            offer_address: "EQBynBO23ywHy_CgarY9NK9FTz0yDsG82PtcbSTQgGoXwiuA",
            ask_address: "EQCM3B12QK1e4yZSf8GtBRT0aLMNyEsBc_DhVfRRtOEffLez",
            units: "300",
            slippage_tolerance: "0.001",
            pool_address: "EQAKleHU6-eGDQUfi4YXMNve4UQP0RGAIRkU4AiRRlgDUbaM",
        });
        expect(response).toEqual({
            ask_address: "ask_address",
            ask_jetton_wallet: "ask_jetton_wallet",
            ask_units: "ask_units",
            fee_address: "fee_address",
            fee_percent: "fee_percent",
            fee_units: "fee_units",
            gas_params: {
                estimated_gas_consumption: "estimated_gas_consumption",
                forward_gas: "forward_gas",
                gas_budget: "gas_budget",
            },
            min_ask_units: "min_ask_units",
            offer_address: "offer_address",
            offer_jetton_wallet: "offer_jetton_wallet",
            offer_units: "offer_units",
            pool_address: "pool_address",
            price_impact: "price_impact",
            recommended_min_ask_units: "recommended_min_ask_units",
            recommended_slippage_tolerance: "recommended_slippage_tolerance",
            router_address: "router_address",
            slippage_tolerance: "slippage_tolerance",
            swap_rate: "swap_rate",
        });
    });

    test("get_router_list", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = {
            router_list: [
                {
                    address: "address",
                    major_version: 1,
                    minor_version: 1,
                    pool_creation_enabled: true,
                    pton_master_address: "pton_master_address",
                    pton_version: "pton_version",
                    pton_wallet_address: "pton_wallet_address",
                    router_type: "WeightedConstProduct",
                },
            ],
        };
        server.mockEndpoint().get("/v1/routers").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.dex.getRouterList();
        expect(response).toEqual({
            router_list: [
                {
                    address: "address",
                    major_version: 1,
                    minor_version: 1,
                    pool_creation_enabled: true,
                    pton_master_address: "pton_master_address",
                    pton_version: "pton_version",
                    pton_wallet_address: "pton_wallet_address",
                    router_type: "WeightedConstProduct",
                },
            ],
        });
    });

    test("get_router", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = {
            router: {
                address: "address",
                major_version: 1,
                minor_version: 1,
                pool_creation_enabled: true,
                pton_master_address: "pton_master_address",
                pton_version: "pton_version",
                pton_wallet_address: "pton_wallet_address",
                router_type: "WeightedConstProduct",
            },
        };
        server
            .mockEndpoint()
            .get("/v1/routers/addr_str")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dex.getRouter("addr_str");
        expect(response).toEqual({
            router: {
                address: "address",
                major_version: 1,
                minor_version: 1,
                pool_creation_enabled: true,
                pton_master_address: "pton_master_address",
                pton_version: "pton_version",
                pton_wallet_address: "pton_wallet_address",
                router_type: "WeightedConstProduct",
            },
        });
    });

    test("simulateSwapUtoipa", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = {
            ask_address: "ask_address",
            ask_jetton_wallet: "ask_jetton_wallet",
            ask_units: "ask_units",
            fee_address: "fee_address",
            fee_percent: "fee_percent",
            fee_units: "fee_units",
            gas_params: {
                estimated_gas_consumption: "estimated_gas_consumption",
                forward_gas: "forward_gas",
                gas_budget: "gas_budget",
            },
            min_ask_units: "min_ask_units",
            offer_address: "offer_address",
            offer_jetton_wallet: "offer_jetton_wallet",
            offer_units: "offer_units",
            pool_address: "pool_address",
            price_impact: "price_impact",
            recommended_min_ask_units: "recommended_min_ask_units",
            recommended_slippage_tolerance: "recommended_slippage_tolerance",
            router_address: "router_address",
            slippage_tolerance: "slippage_tolerance",
            swap_rate: "swap_rate",
        };
        server.mockEndpoint().post("/v1/swap/simulate").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.dex.simulateSwapUtoipa({
            offer_address: "EQBynBO23ywHy_CgarY9NK9FTz0yDsG82PtcbSTQgGoXwiuA",
            ask_address: "EQCM3B12QK1e4yZSf8GtBRT0aLMNyEsBc_DhVfRRtOEffLez",
            units: "300",
            slippage_tolerance: "0.001",
            pool_address: "EQAKleHU6-eGDQUfi4YXMNve4UQP0RGAIRkU4AiRRlgDUbaM",
        });
        expect(response).toEqual({
            ask_address: "ask_address",
            ask_jetton_wallet: "ask_jetton_wallet",
            ask_units: "ask_units",
            fee_address: "fee_address",
            fee_percent: "fee_percent",
            fee_units: "fee_units",
            gas_params: {
                estimated_gas_consumption: "estimated_gas_consumption",
                forward_gas: "forward_gas",
                gas_budget: "gas_budget",
            },
            min_ask_units: "min_ask_units",
            offer_address: "offer_address",
            offer_jetton_wallet: "offer_jetton_wallet",
            offer_units: "offer_units",
            pool_address: "pool_address",
            price_impact: "price_impact",
            recommended_min_ask_units: "recommended_min_ask_units",
            recommended_slippage_tolerance: "recommended_slippage_tolerance",
            router_address: "router_address",
            slippage_tolerance: "slippage_tolerance",
            swap_rate: "swap_rate",
        });
    });

    test("swapStatus", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = {
            address: "address",
            balance_deltas: "balance_deltas",
            coins: "coins",
            exit_code: "exit_code",
            logical_time: "logical_time",
            query_id: "query_id",
            tx_hash: [1],
            "@type": "Found",
        };
        server.mockEndpoint().get("/v1/swap/status").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.dex.swapStatus({
            router_address: "EQB3ncyBUTjZUA5EnFKR5_EnOMI9V1tTEAAPaiU71gc4TiUt",
            owner_address: "EQCM3B12QK1e4yZSf8GtBRT0aLMNyEsBc_DhVfRRtOEffLez",
            query_id: "1",
        });
        expect(response).toEqual({
            address: "address",
            balance_deltas: "balance_deltas",
            coins: "coins",
            exit_code: "exit_code",
            logical_time: "logical_time",
            query_id: "query_id",
            tx_hash: [1],
            "@type": "Found",
        });
    });
});
