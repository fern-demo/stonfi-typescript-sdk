/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { StonfiClient } from "../../src/Client";

describe("Export", () => {
    test("get_cmc_stats", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = [
            {
                key: {
                    base_id: "base_id",
                    base_liquidity: "base_liquidity",
                    base_name: "base_name",
                    base_symbol: "base_symbol",
                    base_volume: "base_volume",
                    last_price: "last_price",
                    quote_id: "quote_id",
                    quote_liquidity: "quote_liquidity",
                    quote_name: "quote_name",
                    quote_symbol: "quote_symbol",
                    quote_volume: "quote_volume",
                    url: "url",
                },
            },
        ];
        server.mockEndpoint().get("/export/cmc/v1").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.export.getCmcStats();
        expect(response).toEqual([
            {
                key: {
                    base_id: "base_id",
                    base_liquidity: "base_liquidity",
                    base_name: "base_name",
                    base_symbol: "base_symbol",
                    base_volume: "base_volume",
                    last_price: "last_price",
                    quote_id: "quote_id",
                    quote_liquidity: "quote_liquidity",
                    quote_name: "quote_name",
                    quote_symbol: "quote_symbol",
                    quote_volume: "quote_volume",
                    url: "url",
                },
            },
        ]);
    });

    test("screener_asset_info", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = {
            asset: {
                circulatingSupply: "circulatingSupply",
                id: "id",
                name: "name",
                symbol: "symbol",
                totalSupply: "totalSupply",
            },
        };
        server
            .mockEndpoint()
            .get("/export/dexscreener/v1/asset/address")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.screenerAssetInfo("address");
        expect(response).toEqual({
            asset: {
                circulatingSupply: "circulatingSupply",
                id: "id",
                name: "name",
                symbol: "symbol",
                totalSupply: "totalSupply",
            },
        });
    });

    test("screener_events", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = { event: { eventType: "swap", block: { blockNumber: 1, blockTimestamp: 1000000 } } };
        server
            .mockEndpoint()
            .get("/export/dexscreener/v1/events")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.screenerEvents({
            fromBlock: 1,
            toBlock: 1,
        });
        expect(response).toEqual({
            event: {
                eventType: "swap",
                block: {
                    blockNumber: 1,
                    blockTimestamp: 1000000,
                },
            },
        });
    });

    test("screener_latest_block", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = { block: { blockNumber: 1, blockTimestamp: 1000000 } };
        server
            .mockEndpoint()
            .get("/export/dexscreener/v1/latest-block")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.screenerLatestBlock();
        expect(response).toEqual({
            block: {
                blockNumber: 1,
                blockTimestamp: 1000000,
            },
        });
    });

    test("screener_pool_info", async () => {
        const server = mockServerPool.createServer();
        const client = new StonfiClient({ environment: server.baseUrl });

        const rawResponseBody = {
            pair: {
                asset0Id: "asset0Id",
                asset1Id: "asset1Id",
                createdAtBlockNumber: 1,
                createdAtBlockTimestamp: 1000000,
                createdAtTxnId: "createdAtTxnId",
                feeBps: 1,
                id: "id",
            },
        };
        server
            .mockEndpoint()
            .get("/export/dexscreener/v1/pair/address")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.export.screenerPoolInfo("address");
        expect(response).toEqual({
            pair: {
                asset0Id: "asset0Id",
                asset1Id: "asset1Id",
                createdAtBlockNumber: 1,
                createdAtBlockTimestamp: 1000000,
                createdAtTxnId: "createdAtTxnId",
                feeBps: 1,
                id: "id",
            },
        });
    });
});
